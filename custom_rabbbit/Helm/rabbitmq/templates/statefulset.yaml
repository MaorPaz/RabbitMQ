apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ template "rabbitmq-ha.fullname" . }}
    namespace: {{ .Release.Namespace }}
    labels:
        app: {{ template "rabbitmq-ha.name" . }}
        chart: {{ template "rabbitmq-ha.chart" . }}
        release: {{ .Release.Name }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  serviceName: {{ template "rabbitmq-ha.fullname" . }}-discovery
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
      type: {{ .Values.updateStrategy }}
  selector:
      matchLabels:
          app: {{ template "rabbitmq-ha.name" . }}
          release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "rabbitmq-ha.name" . }}
        release: {{ .Release.Name }}
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      serviceAccountName: {{ template "rabbitmq-ha.name" . }}
      initContainers:
# Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
# the file must be mounted as read-write. We use init containers to copy from the config map read-only
# path, to a read-write path
{{- if .Values.initContainer.enabled }}
      - name: bootstrap
        image: {{ .Values.busyboxImage.repository}}:{{ .Values.busyboxImage.tag}}
        imagePullPolicy: {{ .Values.busyboxImage.pullPolicy }}
        securityContext:
{{- toYaml .Values.initContainer.securityContext | nindent 12 }}
        command: ['sh']
        args:
            - "-c"
            - |
              set -ex
              cp /configmap/* /etc/rabbitmq
              echo "${RABBITMQ_ERLANG_COOKIE}" > /var/lib/rabbitmq/.erlang.cookie
            {{- if .Values.forceBoot }}
              if [ -d "${RABBITMQ_MNESIA_DIR}" ]; then
                touch "${RABBITMQ_MNESIA_DIR}/force_load"
              fi
            {{- end }}
        env:
        - name: POD_NAME
          valueFrom:
              fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
        - name: RABBITMQ_MNESIA_DIR
          value: /var/lib/rabbitmq/mnesia/rabbit@$(POD_NAME).{{ template "rabbitmq-ha.fullname" . }}-discovery.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: {{ template "rabbitmq-ha.secretName" . }}
              key: rabbitmq-erlang-cookie
        resources:
{{ toYaml .Values.initContainer.resources | indent 12 }}
        volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /etc/rabbitmq
            - name: {{ .Values.persistentVolume.name }}
              mountPath: /var/lib/rabbitmq
                {{- end}}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
              - name: amqp
                protocol: TCP
                containerPort: 5672
              - name: http
                protocol: TCP
                containerPort: 15672
              {{- if .Values.rabbitmqAmqpsSupport.enabled }}
              - name: amqps
                protocol: TCP
                containerPort: 5671
              {{- end }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | trim | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | trim | nindent 12 }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              value: rabbit@$(MY_POD_NAME).{{ template "rabbitmq-ha.fullname" . }}-discovery.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            - name: K8S_HOSTNAME_SUFFIX
              value: .{{ template "rabbitmq-ha.fullname" . }}-discovery.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
            - name: K8S_SERVICE_NAME
              value: {{ template "rabbitmq-ha.fullname" . }}-discovery
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ template "rabbitmq-ha.secretName" . }}
                  key: rabbitmq-erlang-cookie
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: {{ .Values.persistentVolume.name }}
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            - name: definitions
              mountPath: /etc/definitions
              readOnly: true
            {{- if .Values.rabbitmqCert.enabled }}
            - name: cert
              mountPath: /etc/cert
            {{- end }}
            {{- if .Values.nodeSelector }}
                nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
            {{- end }}
            {{- if .Values.tolerations }}
                tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
            {{- end }}
      {{- if eq .Values.podAntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ template "rabbitmq-ha.name" . }}
                  release: {{ .Release.Name }}
              topologyKey: "{{ .Values.podAntiAffinityTopologyKey }}"
            weight: 100
      {{- end }}
      volumes:
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
              name: {{ template "rabbitmq-ha.fullname" . }}
        - name: definitions
          secret:
              secretName: {{ template "rabbitmq-ha.secretName" . }}
              items:
                  - key: {{ .Values.definitionsSource }}
                    path: definitions.json
        {{- if .Values.rabbitmqCert.enabled }}
        - name: cert
          secret:
            defaultMode: 420
            secretName: {{ template "rabbitmq-ha.certSecretName" . }}
        {{- end }}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.persistentVolume.name }}
        annotations:
{{ tpl (toYaml .Values.persistentVolume.annotations) . | indent 10 }}
        labels:
{{ tpl (toYaml .Values.persistentVolume.labels) . | indent 10 }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
              storage: {{ .Values.persistentVolume.size | quote }}
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
      {{- with .Values.persistentVolume.selector }}
        selector:
          {{- toYaml . | nindent 10 }}
      {{- end }}
{{- else }}
        - name: {{ .Values.persistentVolume.name }}
          emptyDir: {}
{{- end }}